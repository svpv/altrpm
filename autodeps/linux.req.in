#!/bin/sh -ef
#
# Copyright (C) 2000-2006  Dmitry V. Levin <ldv@altlinux.org>
#
# find-requires - generate list of linux-specific package requires.
# Inspired by tool with same name from RPM distribution.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

[ -z "$RPM_SCRIPTS_DEBUG" ] || set -x

. @RPMCONFIGDIR@/functions
ValidateBuildRoot

exit_handler()
{
	local rc=$?
	trap - EXIT
	cat >/dev/null 2>&1
	exit $rc
}

trap exit_handler EXIT

FIND_FILES=
FIND_LIBPERL=
FIND_LIBS=
FIND_PAM=
FIND_PERL=
FIND_PKGCONFIG=
FIND_PYTHON=
FIND_SHELL=
FIND_TCL=
libperl_so=

ParseMethod()
{
	local t
	for t in "$@"; do
		case "${t/%,}" in
			no|none|off|false)
				FIND_FILES=
				FIND_LIBPERL=
				FIND_LIBS=
				FIND_PAM=
				FIND_PERL=
				FIND_PKGCONFIG=
				FIND_PYTHON=
				FIND_SHELL=
				FIND_TCL=
				;;
			lib|library)
				FIND_LIBS=1
				;;
			libperl)
				FIND_LIBPERL=1
				;;
			nolib|nolibrary)
				FIND_LIBS=
				;;
			nolibperl)
				FIND_LIBPERL=
				;;
			files)
				FIND_FILES=1
				;;
			nofiles)
				FIND_FILES=
				;;
			pam)
				FIND_PAM=1
				;;
			nopam)
				FIND_PAM=
				;;
			perl)
				FIND_PERL=1
				FIND_LIBPERL=1
				;;
			noperl)
				FIND_PERL=
				FIND_LIBPERL=
				;;
			pkgconfig)
				FIND_PKGCONFIG=1
				;;
			nopkgconfig)
				FIND_PKGCONFIG=
				;;
			python)
				FIND_PYTHON=1
				;;
			nopython)
				FIND_PYTHON=
				;;
			sh|shell)
				FIND_SHELL=1
				;;
			nosh|noshell)
				FIND_SHELL=
				;;
			tcl)
				FIND_TCL=1
				;;
			notcl)
				FIND_TCL=
				;;
			all)
				FIND_FILES=1
				FIND_LIBPERL=1
				FIND_LIBS=1
				FIND_PAM=1
				FIND_PERL=1
				FIND_PKGCONFIG=1
				FIND_PYTHON=1
				FIND_SHELL=1
				FIND_TCL=1
				;;
			default|yes|true)
				ParseMethod $RPM_FINDREQ_DEFAULT_METHOD
				;;
			*)
				Fatal "Unrecognized find-requires method: $t"
				;;
		esac
	done
}
ParseMethod $RPM_FINDREQ_METHOD

FIND_SCRIPT=
if [ -n "$FIND_PAM" -o -n "$FIND_PERL" -o -n "$FIND_PYTHON" -o \
     -n "$FIND_SHELL" -o -n "$FIND_TCL" ]; then
	FIND_SCRIPT=1
fi

if [ -z "$FIND_FILES" -a -z "$FIND_LIBPERL" -a -z "$FIND_LIBS" -a \
     -z "$FIND_PKGCONFIG" -a -z "$FIND_SCRIPT" ]; then
	# Nothing to do
	exit
fi

if [ -n "$*" ]; then
	# We do not handle arguments yet...
	exit
fi

. @RPMCONFIGDIR@/find-package

ulimit -c 0

case "$LD_PRELOAD" in
	*libfakeroot*)
		unset LD_PRELOAD
		;;
	*libbuildreq.so*)
		unset LD_PRELOAD
		;;
esac

FOUND_REQS=
LIST_PERL=
LIST_PYTHON=
LIST_TCL=

ListScriptReqs()
{
	[ -n "$FIND_SCRIPT" ] || return 0

	local f t
	f="$1"
	t="$2"
	if [ -x "$f" ]; then
		local r
		r="$(FindPackage "$f" "$(head -1 "$f" |sed -n 's|^#![[:space:]]*\(/[^[:space:]]\+\).*|\1|p')")" || return 1
		[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
	fi
	if [ -z "${t##*Bourne* shell script text*}" ]; then
		if [ -n "$FIND_SHELL" -a -x "$f" ]; then
			local r
			r="$(@RPMCONFIGDIR@/shell.req "$f")" || return 1
			[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
		fi
	elif [ -z "${t##ASCII *text*}" -a -z "${f%%$RPM_BUILD_ROOT/etc/pam.d/*}" ]; then
		if [ -n "$FIND_PAM" ]; then
			local r
			r="$(@RPMCONFIGDIR@/pam.req "$f")" || return 1
			[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
		fi
	elif [ -z "${t##*perl script text*}" -o -z "${f%%*.p[lmh]}" ]; then
		if [ -n "$FIND_PERL" ]; then
			[ -z "$LIST_PERL" ] && LIST_PERL="$f" || LIST_PERL="$LIST_PERL
$f"
		fi
	elif [ -z "${f%%*.py}" ]; then
		if [ -n "$FIND_PYTHON" ]; then
			[ -z "$LIST_PYTHON" ] && LIST_PYTHON="$f" || LIST_PYTHON="$LIST_PYTHON
$f"
		fi
	elif [ -z "${f%%*.tcl}" ]; then
		if [ -n "$FIND_TCL" ]; then
			[ -z "$LIST_TCL" ] && LIST_TCL="$f" || LIST_TCL="$LIST_TCL
$f"
		fi
	fi
}

FindPerlReqs()
{
	[ -n "$LIST_PERL" ] || return 0

	local r
	r="$(printf %s\\n "$LIST_PERL" |@RPMCONFIGDIR@/perl.req)" || return 1
	[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
}

FindPythonReqs()
{
	[ -n "$LIST_PYTHON" ] || return 0
	[ -x "$RPM_PYTHON" ] || return 0

	local r
	r="$(printf %s\\n "$LIST_PYTHON" |"$RPM_PYTHON" @RPMCONFIGDIR@/python.req.py)" || return 1
	[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
}

FindTclReqs()
{
	[ -n "$LIST_TCL" ] || return 0
	[ -x "$RPM_TCLSH" ] || return 0

	local r
	r="$(printf %s\\n "$LIST_TCL" |@RPMCONFIGDIR@/tcl.req)" || return 1
	[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
}

dump_ld_config='@RPMCONFIGDIR@/dump_ld_config'
shlib_req='@RPMCONFIGDIR@/shlib.req.awk'
elf_ldd='@RPMCONFIGDIR@/ldd'
RPM_FINDREQ_RPATH="$("$dump_ld_config" '' "$RPM_BUILD_ROOT")"
RPM_FINDREQ_RPATH="$RPM_FINDREQ_RPATH /$RPM_LIB $RPM_LIBDIR $("$dump_ld_config")"

FindLibReqs()
{
	[ -n "$FIND_LIBS" ] || return 0

	local braces canon_prefix deps dir dump f interp name pathname prefix rpath segments suffix v vers
	f="$1"

	if dump="$(objdump -p "$f")" &&
	   segments="$(readelf -l "$f")"; then
		interp="$(printf '%s\n' "$segments" |
			  sed -ne 's,^[[:space:]]*\[Requesting program interpreter: \(/[^]]\+\)\]$,\1,p')"
		[ -z "$interp" ] ||
			printf '%s\n' "$interp"
		if printf '%s\n' "$segments" |
			egrep -qs '[[:space:]]\.gnu\.hash([[:space:]]|$)' &&
		   ! printf '%s\n' "$segments" |
			egrep -qs '[[:space:]]\.hash([[:space:]]|$)'; then
			echo 'rtld(GNU_HASH)'
		fi

		suffix="$(printf '%s\n' "$dump" |sed -ne 's/^.*file format \(elf64\).*$/(64bit)/p')"
		[ -z "$suffix" ] && braces= || braces='()'

		rpath="$(printf %s "$dump" |
			 awk '{if ($1=="RPATH") print $2}' |
			 tr -s : ' ' |
			 sed -e "s|\$ORIGIN|${fname%/*}|g")"
		if [ -n "$rpath" ]; then
			rpath="$rpath $RPM_FINDREQ_RPATH"
		else
			rpath="$RPM_FINDREQ_RPATH"
		fi
		rpath="$(printf %s "$rpath" |
			tr -s '[:space:]' '\n' |
			grep -v '^$' |
			LANG=C uniq |
			sed -e "s|^|$RPM_BUILD_ROOT&|" |
			tr -s '[:space:]' : |
			sed -e 's/^:\+//; s/:\+$//')"
		deps="$("$elf_ldd" -- "$f" "$rpath")" || return 1
		deps="$(printf %s "$deps" |sed -e "s|$RPM_BUILD_ROOT||g")"
		# Shared library dependencies, version references.
		for vers in `printf '%s\n' "$dump" |"$shlib_req"`; do
			name="$(printf %s "$vers" |cut -d: -f1)"
			vers="$(printf %s "$vers" |cut -d: -f2-)"
			pathname="$(printf %s "$deps" |awk "-vname=$name" '
NF>2 && $1==name && $2=="=>" && $3~/^/ {print $3}
NF==2 && $2~/^\(.+\)$/ {lib=$1; sub("^/.*/","",lib); if (lib==name) print $1}
				')"
			prefix="${pathname%/*}"
			canon_prefix="$(printf %s "$prefix/" |
				sed -e 's|/tls/|/|' -e 's|/sse2/|/|' -e "s|/$RPM_ARCH/|/|" -e 's|/i[3-9]86/|/|' -e 's|/\+$||')"
			if [ -z "$canon_prefix" -o -n "${canon_prefix##/*}" ]; then
				Info "WARNING: $fname: library $name not found"
				continue
			fi
			for dir in $RPM_FINDREQ_RPATH; do
				if [ "$canon_prefix" = "$dir" ]; then
					prefix=
					break
				fi
			done
			[ -z "$prefix" ] || prefix="$prefix/"
			v=
			for v in `printf %s "$vers" |tr : ' '`; do
				printf '%s%s(%s)%s\n' "$prefix" "$name" "$v" "$suffix"
			done
			[ -n "$v" ] ||
				printf '%s%s%s%s\n' "$prefix" "$name" "$braces" "$suffix"
		done

		if [ -n "$FIND_LIBPERL" -a -z "$libperl_so" -a -z "${f##*/usr/lib/perl?/*/auto/*.so}" ]; then
			libperl_so=`perl -MConfig -e 'print "$Config{libperl}\n"'`
			printf %s\\n "$libperl_so$braces$suffix"
		fi
	fi
}

FindExeReqs()
{
	if [ -x "$1" ]; then
		FindLibReqs "$1"
	fi
}

if [ -n "$RPM_SUBPACKAGE_NAME" ]; then
	if [ -n "${RPM_SUBPACKAGE_NAME%%glibc*}" -a -z "${RPM_SUBPACKAGE_NAME##*-devel-static}" ]; then
		FOUND_REQS=glibc-devel-static
	fi
fi

: ${RPM_FINDREQ_TOPDIR:=}
: ${RPM_FINDREQ_SKIPLIST:=}

while IFS= read -r f; do
	fname="${f#$RPM_BUILD_ROOT}"
	fname="${fname#.}"

	if [ -n "$RPM_FINDREQ_TOPDIR" ] && [ -z "${fname%%$RPM_FINDREQ_TOPDIR/*}" ]; then
		continue
	fi
	if [ -n "$RPM_FINDREQ_SKIPLIST" ]; then
		for skip in $RPM_FINDREQ_SKIPLIST; do
			if [ -z "${fname##$skip}" ]; then
				continue 2
			fi
		done
	fi
	if [ -n "$FIND_FILES" ]; then
		for p in $(grep '^[^#]' @RPMCONFIGDIR@/files.req.list); do
			if [ -z "${fname%%$p/*}" ]; then
				[ -z "$FOUND_REQS" ] && FOUND_REQS="$p" || FOUND_REQS="$FOUND_REQS
$p"
				break
			fi
		done
	fi
	t="$(file -b "$f")"
	if [ -z "${fname##/usr/share/pkgconfig/*.pc}" -o -z "${fname##$RPM_LIBDIR/pkgconfig/*.pc}" ]; then
		[ -n "$FIND_PKGCONFIG" ] || continue
		r="$(@RPMCONFIGDIR@/pkgconfig.req "$f")"
		[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
	elif [ -z "${t##* text*}" ]; then
		ListScriptReqs "$f" "$t"
	elif [ -z "${t##*ELF* executable*dynamically linked*}" ]; then
		r="$(FindExeReqs "$f")"
		[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
	elif [ -z "${t##*ELF* shared object*}" ]; then
		r="$(FindLibReqs "$f")"
		[ -z "$FOUND_REQS" ] && FOUND_REQS="$r" || FOUND_REQS="$FOUND_REQS
$r"
		[ -z "$LIST_PYTHON" ] && LIST_PYTHON="$f" || LIST_PYTHON="$LIST_PYTHON
$f"
	fi
done

# Find requires in listed perl scripts, if any
FindPerlReqs

# Find requires in listed python scripts, if any
FindPythonReqs

# Find requires in listed tcl scripts, if any
FindTclReqs

# Finally sort and print them.
printf %s "$FOUND_REQS" |LC_COLLATE=C sort -u
